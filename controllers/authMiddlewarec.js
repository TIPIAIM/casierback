require("dotenv").config();
const jwt = require("jsonwebtoken");

const blacklistedTokens = [];

const checkBlacklistedToken = (req, res, next) => {
  const token = req.header("Authorization")?.split(" ")[1];
  if (blacklistedTokens.includes(token)) {
    return res.status(401).json({ message: "Token invalide (d√©connect√©)" });
  }
  next();
};

const authMiddlewarec = (req, res, next) => {
  const token = req.header("Authorization")?.split(" ")[1];
  if (!token) return res.status(401).json({ message: "Acc√®s refus√©" });

  if (blacklistedTokens.includes(token)) {
    return res.status(401).json({ message: "Token blacklist√©" });
  }

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.user = decoded;
    next();
  } catch (error) {
    res.status(401).json({ message: "Token invalide" });
  }
};

const logoutMiddleware = (req, res) => {
  const token = req.header("Authorization")?.split(" ")[1];

  if (token) {
    blacklistedTokens.push(token);
    console.log("üîí D√©connexion effectu√©e. Token blacklist√© :", token);
  } else {
    console.log("‚ö†Ô∏è Aucune autorisation trouv√©e pour la d√©connexion.");
  }

  res.status(200).json({ message: "D√©connexion r√©ussie" });
};

module.exports = {
  authMiddlewarec,
  checkBlacklistedToken,
  logoutMiddleware,
};
